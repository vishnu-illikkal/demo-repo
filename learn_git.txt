git
a version control system
track code changes
save initial code to git
then add changes

Directory
CLI command line interface, terminal 
cd  
Repository  your project folder

git commands

clone		  from cloud to local
add		    tracks your files and changes
commit		save to git locally
push		  upload to a remote repo like github
pull		  from cloud to local


check if git installed

use git bash
git --version

get repo from github to local machine
get inside the empty folder open cmd/terminal
git clone 

ssh key required

ls -al ~/.ssh
chek on your computer for ssh keys

ssh-keygen -t ed25519 -C "vishnuip4@gmail.com"

ssh-keygen -p -f ~/.ssh/id_ed25519
to change the passkey
M.9
now ssh is created

now add it to ssh agent
eval "$(ssh-agent -s)"
start the ssh-agent
ssh-add ~/.ssh/id_ed25519
to add to ssh-agent

now add to github
clip < ~/.ssh/id_ed25519.pub
  # Copies the contents of the id_ed25519.pub file to your clipboard
or just copy using text editor

github -> settings -> add gpg or ssh keys 

add for both Authentication and Signing if needed to use for both


if we open git bash from the repo
or open a git bash inside vs code
Vishnu I P@DESKTOP-P4MV8A1 MINGW64 ~/OneDrive/Github_repos/Vishnu_IP/learn_git/local/demo-repo (main)

(main) indicates we are inside a git repo

ls -l 
shows list of files
ls -la
shows all including hidden



FILE CHANGED IN LOCAL PC 

git status

if we add a new file 
git status will give it inside untracked files
(git dosent know about these files)

git add . 
tracks all files
git add index.html

git commit -m "index.html added" -m "some Description" 
              message                 Descrption
              mandatory       

now code is saved in locally

git push

we need to prove that i am using the pc for push by using ssh keys
use passkeys for security


ssh-keygen -t rsa -b 4096 -C "email"
enter
give a name for the file
testkey
need to enter full path else will get created at the current dir

to search for key
ls | grep testkey

upload testkey.pub is public
you put this on github
cat testkey.pub


clip < testkey.pub
use full path if elsewhere

ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDh3Y7l+bnSTxGBpo0LeiZZaLZsFePOejO8oFMxef7F2UrpOMniUwPRgd9npUY05XWX5afjZhcyifm8nZTMrzAd+CDeQA9/CuzRShTLP41CdRB4vMOuP7etpqxQzLN4gCT2lN0+xF4Tgt2pKGxnBOnVQX9LOZilOTfYMN77swgVUMsDVsUSF1XGMS8DqVfrkHJsZc45ec5MqyD0zq+8rmVv0t0Ga/vsbCM/H25X4NUpPI37Gm4jNCTeE1f6oxgVc3dA1tbgye9BP8KjLmffOJMTb5tkBuiTs+mRaYTBtrE37X+MJY9wgH/Fv7TTTryaa59VjaIuHWCZUQqxl+Bu1bj9UpaAhyZrUEfgIop5U8EuqhZSzg5mH5u83WFl37hZ0tKiPhqVRkyXKqfUl2Zronuqym0S7xAPtOyoQgS5qS6/R3bbRZiKgrifnLw/+6PY6SsrtF0dGctlJ9z0GzMPC3JYRhkXPm46Sgei2/Amn6HDmI7wLn7rDnpR2hTz+9fIlzoXqEjN2aJEIEQTkt7+9awRnlwwfo96P1y0mwc0+kRicqhJVzSyEmvZ+y4AgHNj+rtp0AXxTaZ49/5ACHVXnF1YN8h3BxrvQAj1zuntMTY3PJwJDCQLBddomZEOsb5PAJu1SiakYa/LHBtda/ASjW4z1/z0SEmgzQ7ZdvFnX6OEFQ== email@d.co

now add this to github ssh ang gpg keys


git status
git add .
git commit -m "ssh keys sample"
git push

git push origin main



CREATE A FOLDER LOCALLY ADD FILES AND CREATE A GIT REPO FROM that

git init
to create a .git folder and stuff 

$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        README.md

nothing added to commit but untracked files present (use "git add" to track)

git add .

git commit -m "init"

git push origin master 

fatal: 'origin' does not appear to be a git repository
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.

Error because our repo is local only not yet created on the github

to do that create a EMPTY repo in github
copy the ssh whatever from that repo

git remote add origin git@github.com:vishnu-illikkal/demo-repo2.git

git remote -v 
to view the remote repos connected


git add .
git commit -m ""

git push origin master          (master)this will be in git bash
now the file is in the github

git commit -m "d"
git push 
not working 
need to set upstream first time then we can do git push
git push -u origin master

now we can use 
git push

NOTE 
git add . is very important for new repos

git add .
git commit -a 
git push

inside a .sh file will autorun everything
-a will open a file we can add 
message       in first line
Description   in all other lines 

/////////////////////////
git branching
master      main /default
feature     we created

git branch
*main     * = current

git checkout -b feature 
creates a new branch called feature and switch to that 
git branch   to view 


git checkout branch_name        to switch between branches
git diff branch_name            to view differences from current branch and 

git add .
git commit -a 
git push
for 1st time this will not working

git push --set-upstream origin feature

this is needed
git push will work afterwards
now the changes are on github
you can merge it using github but changes are only in th cloud not local


this is in feature branch only now
////////////////////////

to get the changes from cloud to local 
git pull
git branch -d feature
feature = branch name
to delete the branch 
branch is gone from local machine but still shows in cloud

git conflicts
-------------

what if 2 people edited same file?

say 
index.html 

git merge master          will show an merge conflict

<div>Hello</div>
<<<<<<< HEAD
<p>World</p>
=======
<p>there</p>
>>>>>>> main

change this into this to resolve as you wish
<div>Hello</div>
<p>World</p>
<p>there</p>

then commit / push

//////////////////////////////////////////////
git merge master
from master to your branch 
latest changes are updated from master to your branch
The command git merge master merges the changes from the master branch into your current branch. This means that all changes made in the master branch will be added to your current branch. If there are any conflicts between the two branches, you will need to resolve them before you can complete the merge.
//////////////////////////////////////////////


to merge a sub branch into a main branch
git checkout main
git merge sub_branch_name

git diff sub_branch_name
there will be no differences

UNDO IN GIT
--------------

if we accidently did stage a change
git add readme.md
git reset readme.md
to undo that

if you want to reset lad=st commit
git reset HEAD~1

HEAD  means last commit (latest)
commit 1
commit 2

git reset HEAD~2 will undo last 2 commits in local machine

now if i change anything in the local machine and try to push the code to github
it will show i am behind 2 commits 
only because i oushed the c1 c2 before

commit 1

now i deleted the this branch on github 
if i push
it worked ??
it did work.
it worked because we initially configured the upstream 
git push -u origin qt       qt = branch name

